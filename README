Yxtrang
-------

An ongoing quest of penance to undo my last 20+ years of C++
programming by rewriting and reimagining in the pure, elegant,
beautifully precise C language.

The 'trang is not a framework, it's a library. A toolkit. A loose
collection of small modules that do interesting things and which can
be used together if need be or not. And it is absolutely free.

From little things big things grow!


Current modules
---------------

base64:

 Base64 encoder/decoder.


daemon:

 Platform agnostic daemonizer code.


json:

 JSON parser/generator.


jsonq:

 JSON quick and dirty search for named value.


network:

 Threadpooled socket handling with support for select, poll, epoll
 and kqueue.

 Supports TCP (with TLS) and UDP (unicast, multicast and broadcast).


scriptlet:

 Engine to compile to bytecode and run micro-scripts. These can be used
 for event-handling/event-processing to transform input under user
 defined rules that are loaded at run-time.


skiplist:

 Index for any type. This unique variant uses a special bucketized mod
 allowing more efficient storage (400M vs 150M keys on an 8GB system)
 than traditional skiplist.


store:

 Log-structured store with in-memory index by UUID.


thread:

 Threads, threadpool, locks etc.


tree:

 Binary tree designed primarily for append-mode in-order insertion.
 Though out-of-order and delete are supported with some performance
 loss. This variant is bucketized and is extremely space-efficient:
 equal to skiplist above but twice as fast.


uncle:

 Resource discovery and notifcation. Uses UDP broadcast (for now,
 will move to multicast). Uncle is scope based, meaning it can
 organize resources by group: those within the same scope can
 find each other, but not those outside.


uuid:

 Universal unique identifiers.



Build
-----

  git clone http://github.com/infradig/yxtrang
  cd yxtrang
  make

Compilers tested: gcc & clang with C99 and C11 options.
Also tcc and VC++2010.

Platforms tested: Linux, FreeBSD, WinXP, Win7+.

